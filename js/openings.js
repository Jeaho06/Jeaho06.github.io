/**
 * 오프닝 북 (초반 포석 데이터)
 * Key: 이전 수순을 문자열로 나타낸 것. e.g., "9,9"는 첫 수로 중앙에 둔 경우.
 *      "9,9_10,9"는 흑이 9,9에, 백이 10,9에 둔 경우.
 * Value: AI(백)가 둘 수 있는 최적의 대응 수들의 배열.
 *        여러 개를 넣어두면 AI가 그중 하나를 무작위로 선택합니다.
 */
export const openingBook = {
    // 흑이 첫 수를 중앙(J10)에 둔 경우, AI의 대응 수
    "9,9": [
        { col: 9, row: 10 },
        { col: 10, row: 9 },
        { col: 8, row: 9 },
        { col: 9, row: 8 },
        { col: 10, row: 10 },
        { col: 8, row: 8 },
        { col: 10, row: 8 },
        { col: 8, row: 10 },
    ],
    // 흑(9,9) -> 백(9,10) -> 흑(10,10) 다음 AI의 수
    "9,9_9,10_10,10": [
        { col: 8, row: 8 },
        { col: 10, row: 8 }
    ],
    // 흑(9,9) -> 백(9,10) -> 흑(8,8) 다음 AI의 수
    "9,9_9,10_8,8": [
        { col: 10, row: 10 },
        { col: 8, row: 10 }
    ],
    // 흑(9,9) -> 백(10,10) -> 흑(8,8) 다음 AI의 수
    "9,9_10,10_8,8": [
        { col: 9, row: 8 },
        { col: 8, row: 9 }
    ],

    // --- [추가] 중앙 포석에 대한 더 깊은 수순 ---
    // 흑(9,9) -> 백(9,10) -> 흑(10,9) 다음 AI의 수
    "9,9_9,10_10,9": [
        { col: 8, row: 10 },
        { col: 11, row: 9 } // [수정] 오타 수정
    ],
    // 흑(9,9) -> 백(10,9) -> 흑(9,10) 다음 AI의 수 (위와 대칭)
    "9,9_10,9_9,10": [
        { col: 10, row: 8 },
        { col: 9, row: 11 }
    ],
    // 흑(9,9) -> 백(10,10) -> 흑(9,10) 다음 AI의 수
    "9,9_10,10_9,10": [
        { col: 10, row: 9 }
    ],

    // --- [추가] 4수 이후의 분기 (AI의 3번째 수, 총 5~6수 진행) ---
    // 흑(9,9) -> 백(9,10) -> 흑(10,10) -> 백(8,8) -> 흑(8,9) 다음 AI의 수
    "9,9_9,10_10,10_8,8_8,9": [
        { col: 10, row: 9 }, // 백이 3을 만들며 흑의 3을 방어
        { col: 8, row: 10 }  // 흑의 3을 직접 방어
    ],
    // 흑(9,9) -> 백(9,10) -> 흑(10,10) -> 백(8,8) -> 흑(10,9) 다음 AI의 수
    "9,9_9,10_10,10_8,8_10,9": [
        { col: 8, row: 9 }   // 흑의 4-3 유도를 방어
    ],
    // 흑(9,9) -> 백(10,9) -> 흑(9,10) -> 백(10,8) -> 흑(11,10) 다음 AI의 수
    "9,9_10,9_9,10_10,8_11,10": [
        { col: 8, row: 9 }
    ],

    // --- [추가] 기존 포석에 대한 새로운 분기 (AI의 2번째 수, 총 3~4수 진행) ---
    // 흑(9,9) -> 백(9,10) -> 흑(8,9) 다음 AI의 수
    "9,9_9,10_8,9": [
        { col: 7, row: 9 },  // 흑의 3을 직접 방어
        { col: 10, row: 10 } // 자신의 세력을 확장
    ],
    // 흑(9,9) -> 백(10,9) -> 흑(10,10) 다음 AI의 수
    "9,9_10,9_10,10": [
        { col: 9, row: 10 },
        { col: 8, row: 8 }
    ],
    // 흑(9,9) -> 백(10,10) -> 흑(10,9) 다음 AI의 수
    "9,9_10,10_10,9": [{ col: 9, row: 10 }],

    // --- [추가] 사용자가 다른 곳에 첫 수를 두었을 때의 대응 ---
    // 흑이 (8,8)에 둔 경우, AI는 중앙(9,9)을 차지합니다.
    "7,7": [{ col: 9, row: 9 }],
    "7,8": [{ col: 9, row: 9 }],
    "7,9": [{ col: 9, row: 9 }],
    "7,10": [{ col: 9, row: 9 }],
    "7,11": [{ col: 9, row: 9 }],
    "8,7": [{ col: 9, row: 9 }],
    "8,8": [{ col: 9, row: 9 }],
    "8,10": [{ col: 9, row: 9 }],
    "8,11": [{ col: 9, row: 9 }],
    "9,7": [{ col: 9, row: 9 }],
    "9,8": [{ col: 9, row: 9 }],
    "9,11": [{ col: 9, row: 9 }],
    "10,7": [{ col: 9, row: 9 }],
    "10,8": [{ col: 9, row: 9 }],
    "10,10": [{ col: 9, row: 9 }],
    "10,11": [{ col: 9, row: 9 }],
    "11,7": [{ col: 9, row: 9 }],
    "11,8": [{ col: 9, row: 9 }],
    "11,9": [{ col: 9, row: 9 }],
    "11,10": [{ col: 9, row: 9 }],
    "11,11": [{ col: 9, row: 9 }],
};